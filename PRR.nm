mdp

module client1
  state1 : [0..1] init 0; // State of the job (inactive/active)
  task1  : [0..5] init 0; // Length of the job
  priority1 : [0..1] init 0; // Priority of the job
  
  // Create a new job - length chosen non-deterministically
  [create1] state1=0 -> (state1'=1) & (task1'=1) & (priority1'=0);
  [create1] state1=0 -> (state1'=1) & (task1'=2) & (priority1'=0);
  [create1] state1=0 -> (state1'=1) & (task1'=3) & (priority1'=0);
  [create1] state1=0 -> (state1'=1) & (task1'=4) & (priority1'=0);
  [create1] state1=0 -> (state1'=1) & (task1'=5) & (priority1'=0);
  [create1] state1=0 -> (state1'=1) & (task1'=1) & (priority1'=1);
  [create1] state1=0 -> (state1'=1) & (task1'=2) & (priority1'=1);
  [create1] state1=0 -> (state1'=1) & (task1'=3) & (priority1'=1);
  [create1] state1=0 -> (state1'=1) & (task1'=4) & (priority1'=1);
  [create1] state1=0 -> (state1'=1) & (task1'=5) & (priority1'=1);

  // Serve the job
  [serve1] state1=1 & task1>0 -> (task1'=task1-1);

  // Complete the job
  [finish1] state1=1 & task1=0 -> (state1'=0);

endmodule

module client2 = client1 [state1=state2,
                          task1=task2,
                          create1=create2,
                          serve1=serve2,
                          finish1=finish2,
			  priority1=priority2 ]
endmodule

module scheduler
  job1 : bool init false; // Is there a job from client1?
  job2 : bool init false; // Is there a job from client2?
  switch : bool init true; //Do we need to switch between the two jobs?

  // Record that there is a waiting job
  [create1] job1=false -> (job1'=true);
  [create2] job2=false -> (job2'=true);

  // If there is only one job in the queue, execute it
  [serve1] job1=true & job2=false -> true;
  [serve2] job1=false & job2=true -> true;
  
  // If there are two jobs in the queue, but with different priorities
  [serve1] job1=true & job2=true & priority1 > priority2 -> true;
  [serve2] job1=true & job2=true & priority1 < priority2 -> true;
  
  // If there are two jobs in the queue, with equal priorities  
  [serve1] job1=true & job2=true & priority1 = priority2 & switch=true  ->(switch'=false);
  [serve2] job1=true & job2=true & priority1 = priority2 & switch=false ->(switch'=true);

  // Complete any job that has finished
  [finish1] job1=true -> (job1'=false);
  [finish2] job2=true -> (job2'=false);

endmodule

system
  scheduler || client1 || client2
endsystem

